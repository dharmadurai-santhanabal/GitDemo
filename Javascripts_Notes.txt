File 
should be stored with an extension .js
In order to run the file, Just go to the terminal and Run node <file_name>.js , Make sure you installed node.js before
No need to mention the datatype of a variable but it can be decided by JS during the runtime based on the values.
In order to represent the variable , we use the keyword var = 4 . applicable until ES 5
From ES6, two more keywords to represent variables let and const. 
ES 11 is using as per 2020...
Where let and var keywords had same usage but ES5 doesn't recognize let keyword, when you mousehover it , it will say what datatype the value of the variable is.
typeof() methods will tell you what datatype the value of the variable belongs.
we cannot redeclare the variable with let but we can reassign the values.
Redeclaring and reassigning is possible with var keyword.
NOT Operator(!) can be used for boolean only before the variable , so it can reverse the value.
<array_variable>.length to say you the length of the array.
if you want to add a new element to the array at the end using <array_variable>.push
if you want to delete a last element to the array at the end using <array_variable>.pop,  No need to pass the values, since pop() not support any parameters
if you want to insert a new element to the array at the start using <array_variable>.unshift
if you want to know index of any values of its first occurrence in the array, Eg: <array_variable_name>.indexof(value) , if not exist it will return -1.
if you want to confirm the availabilty of some values in array. Eg: <array_variable_name>.includes(value) , o/p will be true or false.
if you want to get the part of the elements from the array you can use slice method.


Array functions are reduce, filter and Map.

if you want to iterate and accumulate the values in the array then you can use reduce functions.


if you want to filter some array based on condition then you can use filter functions.

if you want to sort the array, you can use <array_name>.sort() method.


if you want to map an array elements to the new array elements , we can use map function.

sort method will give you the results in the ascending order.

reverse method will give you the results in the descending order.

if you want to assign a function directly to the variable as a value, it should be anonymous, it means function without name.



Functions in javascript:

function <function_name>()
{

}

Anonymous Functions in JS:(Function without name)

function()
{

}


Scopes in functions,

=> var keyword scopes are  global(Anything give outside of the function) / functional(Anything give within the function)
Eg: 1

var test = "AAAAA"

function()
{
	var test = "BBBB"
}

console.log(test)

O/P is AAAAA

Eg: 2

var test = "AAAAA"

if(1 == 1)
{
	var test = "CCCC"
}
function()
{
	var test = "BBBB"
}

console.log(test)

O/P is CCCC (Not inside the function, so considering it as global)


=> In order to address the issue, we bring the let keyword , where the scopes are either global or block level(Anything mentioned within the block which doesnt access from outside).



let / var and const keywords:

The var keyword should only be used in code written for older browsers, so it good to use let instead of var other than there is a need.

var keyword scope are global and functional.
let keyword scope are global and block level

var are redeclarable, let are not redeclarable.
var and let are reinitialized

Const is as same as let but its not reinitialized.

Redeclaring a variable inside a block will also redeclare the variable outside the block:

Let keyword can solve a problem, Redeclaring a variable inside a block will not redeclare the variable outside the block:

var binds to this.

let not binds to this.

When to Use var, let, or const?
1. Always declare variables

2. Always use const if the value should not be changed

3. Always use const if the type should not be changed (Arrays and Objects)

4. Only use let if you can't use const

5. Only use var if you MUST support old browsers.




Const:

It does not define a constant value. It defines a constant reference to a value.

Because of this you can NOT:

Reassign a constant value
Reassign a constant array
Reassign a constant object

But you CAN:

Change the elements of constant array but you cannot reassign the array.
Change the properties of constant object

it applicable for objects too, 

You can change the properties of a constant object

But you can NOT reassign the object


Array is an collections of elements.
Strings is an collections of characters.


Strings:

<strings>.length => Which gives the total characters of the string.

trim()  => To remove the whitespace before and after the string.

<string>.slice(start,end) => slice the strings as per the need.

<string>.split('s') => it will split the strings before and after the character.
					   Storing those two strings in a array.
					   

Eg:

var a = '30'
var b = '25'

var diff = a - b

O/p: Will throws an error , we unable to substract two strings.

we can convert the string to the number using parseInt() method

var diff = parseInt(a) - parseInt(b)

O/P: 5 (No Errors)

if you want to return back to string from number you can use toString()

diff.toString()  => Here it converted the numbers to strings.


Objects:

if you want to access own object properties, we can do by using 'this' keyword, Here this represent the current object.


JS defines two types of values.

Fixed values are called Literals.

Variable values are called Variables.

In JS, Variables that are not declared should be declared when it used.

a =1 
b =2

c = a + b

After the declaration of a variable, the variable has no value (technically it is undefined).
A variable declared without a value will have the value undefined.


JavaScript treats a dollar sign and _  as a letter.


JS Class:

if you want to acces the property/attribute of a class, we need to create an obj with new <class>().

if you put get before the method name , then it is considered as an properties not as a method.

properties mentioned inside the constructor cannot be accessed from outside, so we can use this keyword to access from outside, this is the current class obj.

Variable mentioned in the constructor are instance variable.

Variable mentioned in the class are class variable.

Obj is an instance of a variable.

if you want to access some other classes , you need to export that class first like 'module.exports =' in front of class <classname> 

then go to where you planning to access and  for import add like 
const <classname> = require('filename of that class belongs')

In order to access that class, create an obj to access those methods present in that class.

For Inheritance, we need to use the extend keyword and need to mention the location of parentclass in require.

const Person = require('/file.js')
class child extends Person
{

}

you can call the parent class constructor using the super() keyword.

if particular properties or method exist in both, it will prioritise with child one instead of parent.


locators:

CSS and XPATH are supported

CSS:

if id attribute is there, 

#<id> or tagname#<id>

if by class name means,

tagname.classname

for any attributes, 

[attribute = "value"]

if by any text means, 

text = ""


if you want to enter into editbox , you can use fill or type, In latest playwright , type method is deprecated, so we can use fill.


